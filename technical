{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMB9cSCkRW3Gbq5zEWy188B",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sravanthi123456789/Python/blob/main/technical\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "LEAP YEAR\n"
      ],
      "metadata": {
        "id": "UbTuyIhBgjlW"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lwh_ENVZc5VK",
        "outputId": "72cc44ae-cf4d-4796-f194-caf0b91588f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2002 is not a leap year\n"
          ]
        }
      ],
      "source": [
        "year=2002\n",
        "\n",
        "if((year % 400 == 0) or\n",
        "     (year % 100 != 0) and \n",
        "     (year % 4 == 0)):\n",
        "  print(year,\"is a leap year\");\n",
        "else:\n",
        "  print(year,\"is not a leap year\");\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "year=2400\n",
        " \n",
        "if((year % 400 == 0) or\n",
        "    (year % 100 != 0) and\n",
        "    (year % 4 == 0)):\n",
        "  print(year,\"is a leap year\");\n",
        "else:\n",
        "  print(year,\"is not a leap year\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tFIJ2Pf-f4dr",
        "outputId": "06868810-e735-443e-c238-31cd6467adda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2400 is a leap year\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "REVERSED NUMBER"
      ],
      "metadata": {
        "id": "0LdcyuFLgriE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num=1234\n",
        "reversed_num=0\n",
        "while num!=0:\n",
        "  digit=num%10\n",
        "  reversed_num=reversed_num*10+digit\n",
        "  num//=10\n",
        "print(reversed_num)"
      ],
      "metadata": {
        "id": "fmx7_yNohNM4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "994e5a86-0b49-4816-a813-17fa35d1d1a6"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4321\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num=4567\n",
        "reversed_num=0\n",
        "while num!=0:\n",
        "  digit=num%10\n",
        "  reversed_num=reversed_num*10+digit\n",
        "  num//=10\n",
        "print(reversed_num)"
      ],
      "metadata": {
        "id": "3K_LISzHjiUV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3498afe0-d365-4b4d-c2e5-80b178f9a04f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7654\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "PATTERN"
      ],
      "metadata": {
        "id": "iRAdpENPn1dX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "for i in range(1,6):\n",
        "  for j in range(1,i+1):\n",
        "    print(j,end=\"\")\n",
        "  print(\"\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "88pK8Db5kp0d",
        "outputId": "3d23b475-019b-4519-8bb5-2b8bdd953972"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "\n",
            "12\n",
            "\n",
            "123\n",
            "\n",
            "1234\n",
            "\n",
            "12345\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2,7):\n",
        "  for j in range(2,i+1):\n",
        "    print(j,end=\"\")\n",
        "  print(\"\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rWojBcZqoi_U",
        "outputId": "fcdf4211-824c-4974-a3ae-e7249b717d0d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "\n",
            "23\n",
            "\n",
            "234\n",
            "\n",
            "2345\n",
            "\n",
            "23456\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "PRIME OR NOT"
      ],
      "metadata": {
        "id": "MO23hsEgo2Qv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num=29\n",
        "prime = True\n",
        "for i in range(2,num):\n",
        "  if(num % i)==0:\n",
        "    prime = False\n",
        "    break\n",
        "if prime:\n",
        "    print(num,\"is a prime num\")\n",
        "else:\n",
        "    prime(num,\"is not a prime num\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mkv3OcszpiGW",
        "outputId": "5f88ec4e-3da5-473f-f8c1-eeaf32161eb9"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "29 is a prime num\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num=10\n",
        "prime = True\n",
        "for i in range (2,num):\n",
        "  if(num % i) == 0:\n",
        "    prime = False\n",
        "    break\n",
        "if prime:\n",
        "  print(num,\"is a prime num\")\n",
        "else:\n",
        "  print(num,\"is not a prime num\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yrT7rX4Dqaso",
        "outputId": "e9b93cec-8448-4cdb-c282-3565c947b2cf"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 is not a prime num\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "C94iLPNPrBcN"
      }
    }
  ]
}